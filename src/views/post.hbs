{{> navbar }}
{{> post-button }}
{{> toast }}

<link rel="stylesheet" href="/css/profile.css">

<!-- Header -->
<header
    class="flex justify-center items-center text-center bg-transparent fixed top-0 inset-x-0 bg-[#fafafa] p-5 z-[1000] max-w-[640px] mx-auto">
    <div class="absolute left-4 top-4 text-black">
        <i class="back-button fa-solid fa-arrow-left te xt-xs px-2 py-2 rounded-full bg-white hover:scale-110 border border-[#d5d5d5] cursor-pointer"
            onclick="history.back()"></i>
    </div>
    <h1 class="font-semibold title text-[15px] text-black cursor-pointer">Thread</h1>
    <a href="/">
        <svg width="32" height="32" viewBox="0 0 826 960" class="logo hidden" fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
                d="M642.685 444.941C638.55 442.959 634.35 441.052 630.095 439.225C622.685 302.691 548.08 224.525 422.809 223.725C422.242 223.721 421.677 223.721 421.11 223.721C346.182 223.721 283.866 255.704 245.51 313.904L314.405 361.164C343.058 317.692 388.026 308.424 421.143 308.424C421.526 308.424 421.91 308.424 422.288 308.427C463.535 308.69 494.66 320.683 514.805 344.07C529.465 361.097 539.27 384.625 544.125 414.319C507.555 408.103 468.005 406.192 425.725 408.616C306.623 415.477 230.055 484.94 235.198 581.46C237.807 630.42 262.199 672.54 303.875 700.055C339.112 723.315 384.495 734.69 431.661 732.115C493.95 728.7 542.815 704.935 576.905 661.48C602.795 628.48 619.17 585.715 626.4 531.83C656.085 549.745 678.085 573.32 690.235 601.66C710.895 649.835 712.1 729 647.505 793.54C590.91 850.08 522.88 874.54 420.067 875.295C306.021 874.45 219.769 837.875 163.69 766.585C111.177 699.83 84.0385 603.41 83.026 480C84.0385 356.589 111.177 260.168 163.69 193.414C219.769 122.125 306.02 85.55 420.066 84.7025C534.94 85.5565 622.695 122.307 680.92 193.94C709.47 229.068 730.995 273.244 745.185 324.752L825.92 303.211C808.72 239.811 781.655 185.178 744.825 139.87C670.18 48.0334 561.01 0.97574 420.348 0H419.785C279.408 0.97235 171.46 48.209 98.9415 140.396C34.4095 222.432 1.122 336.579 0.00349998 479.663L0 480L0.00349998 480.337C1.122 623.42 34.4095 737.57 98.9415 819.605C171.46 911.79 279.408 959.03 419.785 960H420.348C545.15 959.135 633.12 926.46 705.59 854.055C800.405 759.33 797.55 640.595 766.3 567.705C743.88 515.435 701.135 472.981 642.685 444.941ZM427.202 647.535C375.003 650.475 320.772 627.045 318.098 576.86C316.116 539.65 344.579 498.13 430.406 493.184C440.235 492.617 449.88 492.34 459.355 492.34C490.53 492.34 519.695 495.368 546.21 501.165C536.32 624.675 478.31 644.73 427.202 647.535Z"
                fill="black" />
        </svg>
    </a>
</header>

<!-- Main Content -->
<div class="main-container flex mt-[50px] phone:mt-[60px] h-full justify-center overflow-hidden">
    <div
        class="profile-card shadow-lg border-[0.5px] bg-[#ffffff] w-full h-full max-w-[640px] border-[#d5d5d5] overflow-y-auto rounded-t-[22px]">
        <div class="w-full max-w-2xl bg-[#ffffff] overflow-y-auto">
            <div id="threads-content">
                <div id="threads-container" class="bg-white py-3">
                    {{!-- Main Thread --}}
                    <div class="bg-white px-6 py-0 flex">
                        <div class="mr-4">
                            <img src="{{author.avatarUrl}}" alt="{{author.username}}"
                                class="w-10 h-auto rounded-full object-cover cursor-pointer mt-4">
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center mb-0 pt-3">
                                <div class="font-semibold text-black hover:underline cursor-pointer username-link"
                                    data-user-id="{{author.id}}">
                                    <a href="/@{{author.username}}" class="cursor-pointer">{{author.username}}</a>
                                </div>
                                <div class="text-[#999999] text-sm ml-2 font-normal">
                                    {{timeAgo thread.createdAt}}
                                </div>
                            </div>
                            <h3 class="text-sm font-normal mb-2 text-[#121212] sm:text-base">
                                {{thread.title}}
                            </h3>
                            <p class="text-sm font-normal mb-2 text-[#121212] md:text-base">
                                {{thread.content}}
                            </p>
                            {{#if thread.imageUrl}}
                            <div class="mb-3">
                                <img src="{{thread.imageUrl}}" alt="Thread Image"
                                    class="w-3/5 h-auto rounded-lg object-cover cursor-pointer">
                            </div>
                            {{/if}}
                            <div class="flex items-center space-x-1 text-[#424242] mb-3">
                                <div class="like-button flex items-center space-x-1 font-normal hover:bg-[#f5f5f5] cursor-pointer px-3 py-2 rounded-3xl"
                                    data-thread-id="{{thread.id}}">
                                    <i
                                        class="fa-{{#if thread.isLiked}}solid text-red-500{{else}}regular{{/if}} fa-heart"></i>
                                    <span class="{{#if thread.isLiked}}text-red-500{{/if}}">{{thread.likesCount}}</span>
                                </div>
                                <div class="comment-button flex items-center space-x-1 font-normal hover:bg-[#f5f5f5] cursor-pointer px-3 py-2 rounded-3xl"
                                    data-thread-id="{{thread.id}}">
                                    <i class="fa-regular fa-comment"></i>
                                    <span>{{thread.commentsCount}}</span>
                                </div>
                            </div>
                            <hr class="border-t border-[#d9d9d9] mt-4">
                        </div>
                    </div>
                </div>

                {{!-- Comments Section --}}
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-sm font-semibold px-[5rem] sm:text-base">Replies</h2>
                </div>
                <div class="border-t border-[#d9d9d9]">
                    <div class="px-6 py-3">
                        <div id="replies-container">
                            {{#each comments}}
                            <div class="flex space-x-4 py-0 mt-3">
                                <div class="flex-shrink-0 relative">
                                    <img src="{{User.avatarUrl}}" alt="{{User.username}}"
                                        class="w-10 h-auto mt-4 cursor-pointer rounded-full object-cover">
                                </div>
                                <div class="flex-1">
                                    <div class="flex items-center mb-1">
                                        <span class="font-semibold hover:underline mr-2 username-link"
                                            data-user-id="{{User.id}}">
                                            <a href="/@{{User.username}}" class="cursor-pointer">{{User.username}}</a>
                                        </span>
                                        <span class="text-gray-500 text-sm">{{timeAgo createdAt}}</span>
                                    </div>
                                    <p class="text-sm mb-2 w-[85%]">{{content}}</p>
                                    <div class="flex space-x-4 mb-3">
                                    </div>
                                    {{#unless @last}}
                                    <hr class="border-t border-[#d9d9d9] mt-2">
                                    {{/unless}}
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{!-- Comment Overlay --}}
<div id="comment-overlay"
    class="bg-[#030303] bg-opacity-50 w-screen h-screen fixed z-20 justify-center place-items-center hidden">
    <div class="w-full md:max-w-[600px] h-full md:max-h-[50vh] bg-white md:rounded-xl relative" id="comment-container">
        <div class="text-center font-bold p-4 border-b border-gray-300 relative">Reply
            <button class="absolute left-4 font-normal p-1 leading-none" onclick="exitComment()">Cancel</button>
        </div>

        <div class="p-4 flex h-3/4">
            <div class="basis-1/12 min-w-10 bg-white">
                <img src="{{currentUser.avatarUrl}}" alt="Avatar" class="rounded-full user-avatarUrl" />
            </div>

            <div class="basis-11/12 pl-4 bg-white flex flex-col">
                <div class="font-medium user-username">
                    {{currentUser.username}}
                </div>
                <textarea name="comment" class="leading-5 outline-none resize-none" id="comment"
                    placeholder="What's new?" rows="1" style="scrollbar-width: none;"></textarea>
            </div>
        </div>

        <button
            class="post-comment-button absolute right-6 bottom-4 bg-black text-white text-center font-medium rounded-xl px-6 py-2 hover:scale-95 border border-gray-300 leading-none"
            id="post-comment-button">
            Post
        </button>
    </div>
</div>

<script>
    function adjustCommentContainerHeight() {
        const commentContainer = document.getElementById('comment-container');
        const scrollableContent = document.getElementById('comment-scrollable-content');
        const commentTextarea = document.getElementById('comment');

        if (!commentContainer || !scrollableContent || !commentTextarea) return;

        if (window.innerWidth < 768) {
            commentContainer.style.height = '100vh';
            scrollableContent.style.overflowY = 'auto';
        } else {
            commentContainer.style.height = 'auto';
            const maxHeight = window.innerHeight * 0.7;
            const containerHeight = commentContainer.offsetHeight;

            if (containerHeight > maxHeight) {
                commentContainer.style.height = `${maxHeight}px`;
                scrollableContent.style.overflowY = 'auto';
            } else {
                commentContainer.style.height = 'auto';
                scrollableContent.style.overflowY = 'hidden';
            }
        }
    }

    function exitComment() {
        const overlay = document.getElementById('comment-overlay');
        const container = document.getElementById('comment-container');
        const comment = document.getElementById('comment');
        const form = document.getElementById('comment-form');

        overlay.classList.remove('flex');
        overlay.classList.add('hidden');
        container.classList.remove('scale-100', 'opacity-100');
        container.classList.add('scale-95', 'opacity-0');
        comment.value = '';
        comment.style.height = 'auto';
    }

    function showCommentOverlay(threadId) {
        const overlay = document.getElementById('comment-overlay');
        const container = document.getElementById('comment-container');
        const threadIdInput = document.getElementById('comment-thread-id');

        threadIdInput.value = threadId;
        overlay.classList.remove('hidden');
        overlay.classList.add('flex');

        adjustCommentContainerHeight();

        setTimeout(() => {
            container.classList.remove('scale-95', 'opacity-0');
            container.classList.add('scale-100', 'opacity-100');
        }, 100);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const showToast = (toastId, message) => {
            const toast = document.getElementById(toastId);
            toast.classList.remove('hidden');
            if (toastId === 'toast-success') {
                const successMessage = document.querySelector('.success-toast-message');
                successMessage.innerText = message;
            } else {
                const errorMessage = document.querySelector('.error-toast-message');
                errorMessage.innerText = message;
            }
            setTimeout(() => {
                toast.classList.add('fade-out');
                setTimeout(() => {
                    toast.classList.add('hidden');
                    toast.classList.remove('fade-out');
                }, 1000);
            }, 3000);
        }

        const createCommentElement = (comment, user) => {
            const div = document.createElement('div');
            div.className = 'flex space-x-4 py-0 mt-3';
            div.innerHTML = `
                <div class="flex-shrink-0 relative">
                    <img src="${user.avatarUrl}" alt="${user.username}"
                        class="w-10 h-auto mt-4 cursor-pointer rounded-full object-cover">
                </div>
                <div class="flex-1">
                    <div class="flex items-center mb-1">
                        <span class="font-semibold hover:underline mr-2 username-link"
                            data-user-id="${user.id}">${user.username}</span>
                        <span class="text-gray-500 text-sm">just now</span>
                    </div>
                    <p class="text-sm mb-2 w-[85%]">${comment}</p>
                    <div class="flex space-x-4 mb-3">
                    </div>
                    <hr class="border-t border-[#d9d9d9] mt-2">
                </div>
            `;
            return div;
        }

        const closeToast = (toastId) => {
            const toast = document.getElementById(toastId);
            toast.classList.add('fade-out');
            setTimeout(() => {
                toast.classList.add('hidden');
                toast.classList.remove('fade-out');
            }, 1000);
        }

        document.querySelectorAll('.fa-heart').forEach(item => {
            item.parentElement.addEventListener('click', async function () {
                const threadId = this.closest('.like-button').dataset.threadId;
                const likeCountElement = item.parentElement.querySelector('span');
                const currentLikes = parseInt(likeCountElement.innerText);

                const response = await fetch('/like', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        thread: threadId
                    }),
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    if (result.liked) {
                        item.classList.remove('fa-regular');
                        item.classList.add('fa-solid', 'text-red-500');
                        likeCountElement.innerText = currentLikes + 1;
                        likeCountElement.classList.add('text-red-500');
                    } else {
                        item.classList.remove('fa-solid', 'text-red-500');
                        item.classList.add('fa-regular');
                        likeCountElement.innerText = currentLikes - 1;
                        likeCountElement.classList.remove('text-red-500');
                    }
                } else {
                    console.error(result.message);
                }
            });
        });

        const exitComment = () => {
            document.getElementById('comment-overlay').classList.remove('flex');
            document.getElementById('comment-overlay').classList.add('hidden');
            document.getElementById('comment').value = '';
        }

        document.querySelectorAll('.fa-comment').forEach(item => {
            item.parentElement.addEventListener('click', function () {
                document.getElementById('comment-overlay').classList.remove('hidden');
                document.getElementById('comment-overlay').classList.add('flex');
                adjustCommentContainerHeight();
            });
        });

        document.getElementById('comment-overlay').addEventListener('click', function (e) {
            const commentContainer = document.getElementById('comment-container');
            if (!commentContainer.contains(e.target)) {
                exitComment();
            }
        });

        const commentTextarea = document.getElementById('comment');
        if (commentTextarea) {
            commentTextarea.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
                adjustCommentContainerHeight();
            });
        }

        window.addEventListener('resize', adjustCommentContainerHeight);

        document.getElementById('post-comment-button').addEventListener('click', async function () {
            const commentContent = document.getElementById('comment').value.trim();
            if (commentContent === '') return;

            const threadId = document.querySelector('.comment-button').dataset.threadId;

            try {
                const response = await fetch('/comment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        thread: threadId,
                        comment: commentContent
                    }),
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    const repliesContainer = document.getElementById('replies-container');

                    const newComment = createCommentElement(
                        commentContent,
                        {
                            id: {{ currentUser.id }},
                username: document.querySelector('.user-username').textContent.trim(),
                    avatarUrl: document.querySelector('.user-avatarUrl').src
            }
                    );

        repliesContainer.insertBefore(newComment, repliesContainer.firstChild);

        const commentCountElement = document.querySelector('.comment-button span');
        commentCountElement.textContent = parseInt(commentCountElement.textContent) + 1;

        showToast('toast-success', result.message || 'Comment posted successfully!');

        exitComment();
    } else {
        showToast('toast-error', result.message || 'An error occurred while posting your comment.');
                }
            } catch (error) {
        console.error('Error posting comment:', error);
        showToast('toast-error', 'An error occurred while posting your comment.');
    }
        });
    });
</script>