<div class="flex flex-col items-center justify-center flex-grow min-h-screen bg-white">
    <!-- Logo -->
    <a href="/index"><i class="fa-brands fa-threads fa-3x"></i></a>
    <div class="text-center w-full max-w-[386px] sm-custom:max-w-[418px] p-6 gap-0 mb-2">

        <!-- Heading -->
        <h1 class="mb-2 text-xl font-bold">Reset password</h1>
        {{#if done}}
        <p class="mb-4 opacity-40">Your password has been update. You can now
            <a class="!opacity-100 bold text-blue-600 underline hover:text-blue-800 visited:text-purple-600"
                href="/login">login</a>
            using your new password!
        </p>
        {{else}}
        {{#if expired}}
        <p class="mb-4 opacity-40">Your link is expired!</p>
        {{else}}
        <p class="mb-4 opacity-40">Enter your new password.</p>

        <!-- Form -->
        <form id="reset-form" class="flex flex-col gap-2" method="POST" action="/reset" onsubmit="validateResetPasswordForm(event)">

            <div>
                <div class="relative">
                    <label for="password" class="sr-only form-lable">Password</label>
                    <input type="password" id="password"
                        class="form-control bg-[#F5F5F5] w-full p-4 outline-none rounded-xl pr-10" name="password"
                        placeholder="New password" onchange="validatePasswords()">
                    <i class="absolute transform -translate-y-1/2 cursor-pointer far fa-eye right-5 top-1/2 opacity-30"
                        id="togglePassword" onclick="togglePasswordVisibility(this)"></i>
                </div>
                <small id="password-error" class="hidden block text-left text-red-600"
                    style="text-indent: 1rem;"></small>
            </div>

            <div>
                <div class="relative">
                    <label for="confirmPassword" class="sr-only form-lable">Confirm new password</label>
                    <input type="password" id="confirmPassword"
                        class="form-control bg-[#F5F5F5] w-full p-4 outline-none rounded-xl pr-10" name="confirmPassword"
                        placeholder="Confirm new password" oninput="validatePasswords()">
                    <i class="absolute transform -translate-y-1/2 cursor-pointer far fa-eye right-5 top-1/2 opacity-30"
                        id="toggleConfirmPassword" onclick="togglePasswordVisibility(this)"></i>
                </div>
                <small id="confirmPassword-error" class="hidden block text-left text-red-600"
                    style="text-indent: 1rem;"></small>

            </div>

            {{#if resetMessage}}
            <div class="flex justify-start">
                <small class="text-left text-red-600" style="text-indent: 1rem;">{{{resetMessage}}}</small>
            </div>
            {{/if}}
            <input type="hidden" name="email" value="{{email}}">
            <input type="hidden" name="token" value="{{token}}">
            <!-- Submit Button -->
            <button id="update-button" type="submit"
                class="w-full p-4 font-medium text-white bg-black text-opacity-40 rounded-2xl">
                Update
            </button>

        </form>


        <!-- Or divider -->
        <div class="flex items-center py-5 mt-4">
            <hr class="flex-grow">
            <small class="mx-2 opacity-40 ">Remembered password</small>
            <hr class="flex-grow">
        </div>


        <!-- Signup Redirect -->
        <button id="loginBtn" type="button" class="w-full p-4 font-medium text-white bg-black rounded-2xl"
            onclick="window.location.href='/login'">
            Log in
        </button>
        {{/if}}
        {{/if}}
    </div>
</div>

<script>
    document.querySelectorAll('.form-control').forEach(input => {
        input.addEventListener('focus', () => {
            input.classList.add('border', 'border-gray-300');
        });
        input.addEventListener('blur', () => {
            input.classList.remove('border', 'border-gray-300');
        });
    });

    document.querySelectorAll('.form-control').forEach(input => {
        input.addEventListener('input', () => {
            const allFilled = Array.from(document.querySelectorAll('.form-control')).every(input => input.value);
            if (allFilled) {
                document.getElementById('update-button').classList.remove('text-opacity-40');
            } else {
                document.getElementById('update-button').classList.add('text-opacity-40');
            }
        });
    });

    const regexPassword = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\W)(?!.* ).{8,16}$/;

    function togglePasswordVisibility(icon) {
        // Lấy id của icon
        const iconId = icon.id;
        // Lấy id của input field
        const inputId = iconId.replace('toggle', '');
        const inputFieldId = inputId.charAt(0).toLowerCase() + inputId.slice(1); 

        const inputField = document.querySelector(`#${inputFieldId}`);

        if (inputField.type === 'password') {
            inputField.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            inputField.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    }



    function validatePasswords() {
        let password = document.getElementById('password');
        let confirmPassword = document.getElementById('confirmPassword');

        if (password.value !== confirmPassword.value) {
            document.getElementById('confirmPassword-error').classList.remove('hidden');
            document.getElementById('confirmPassword-error').textContent = 'Passwords do not match!';
        } else {
            document.getElementById('confirmPassword-error').classList.add('hidden');
        }
    }


    async function validateResetPasswordForm(event) {
    event.preventDefault();

    // Lấy giá trị từ các input
    const password = document.getElementById('password').value.trim();
    const confirmPassword = document.getElementById('confirmPassword').value.trim();

    // Lấy các phần tử thông báo lỗi
    const passwordError = document.getElementById('password-error');
    const confirmPasswordError = document.getElementById('confirmPassword-error');

    // Xóa thông báo lỗi cũ
    passwordError.classList.add('hidden');
    confirmPasswordError.classList.add('hidden');
    passwordError.textContent = '';
    confirmPasswordError.textContent = '';

    // Kiểm tra trạng thái hợp lệ
    let isValid = true;

    // Kiểm tra password
    if (!password) {
        passwordError.textContent = 'Password is required';
        passwordError.classList.remove('hidden');
        isValid = false;
    } else if (!regexPassword.test(password)) {
        passwordError.textContent = 'Password must be 8-16 characters, including 1 number, 1 uppercase letter, 1 lowercase letter, and 1 special character';
        passwordError.classList.remove('hidden');
        isValid = false;
    }

    // Kiểm tra confirmPassword
    if (!confirmPassword) {
        confirmPasswordError.textContent = 'Confirm password is required';
        confirmPasswordError.classList.remove('hidden');
        isValid = false;
    } else if (confirmPassword !== password) {
        confirmPasswordError.textContent = 'Passwords do not match';
        confirmPasswordError.classList.remove('hidden');
        isValid = false;
    }

    // Nếu không hợp lệ, dừng lại
    if (!isValid) return;

    // Tiến hành gửi dữ liệu bằng Fetch API hoặc submit form
    document.getElementById('reset-form').submit();
}


</script>