{{> navbar}}
{{> post-button}}

{{!-- Login button --}}
<a href="/login">
    <button id="login-button"
        class="fixed top-4 right-4 z-20 bg-black text-white text-center font-medium rounded-xl leading-none px-4 py-2 hover:scale-95 {{#if loggedIn}} hidden {{/if}}">
        Log in
    </button>
</a>

{{!-- All/Following Options --}}
<div id="options"
    class="fixed z-10 top-0 left-1/2 -translate-x-1/2 w-full md:w-1/2 flex justify-center md:py-1 pt-14 md:bg-lotion bg-white dark:md:bg-vampire-black dark:bg-eerie-black">
    <a href="/all-threads"
        class="w-1/2 md:w-[320px] md:min-w-[320px] md:rounded-xl py-4 text-center font-medium cursor-pointer border-b-2 border-black text-black {{#if following}} text-opacity-40 {{else}} {{/if}} md:border-none md:hover:bg-gray-200"
        id="all">All</a>
    <a href="/following-threads"
        class="w-1/2 md:w-[320px] md:min-w-[320px] md:rounded-xl py-4 text-center font-medium cursor-pointer border-b-2 border-black text-black {{#if following}} {{else}} text-opacity-40 {{/if}} md:border-none md:hover:bg-gray-200"
        id="following">Following</a>
</div>

{{!-- Main container --}}
<div class="main-container mt-10 flex justify-center h-screen overflow-hidden">
    <div id="feeds"
        class="shadow-lg bg-white dark:bg-eerie-black w-full h-full md:w-[640px] border-light-gray dark:border-charleston-green border rounded-t-3xl overflow-y-auto md:mt-6 mt-16 pb-36 md:pb-10"
        style="scrollbar-width: none;">
        {{#with currentUser}}
        <div class="p-4 md:flex items-center hidden relative" id="question">
            <div class="basis-1/12 min-w-10">
                <a href="/profile"><img class="rounded-full" src="{{avatarUrl}}" alt="Avatar"></a>
            </div>
            <span class="opacity-40 leading-none p-4 cursor-text" onclick="createNewThread()">How are you
                today?</span>
            <button
                class="absolute right-4 bg-white dark:bg-eerie-black text-center font-medium rounded-xl px-4 py-2 hover:scale-95 border border-light-gray dark:border-charleston-green leading-none"
                onclick="createNewThread()">Post
            </button>
        </div>
        {{/with}}
        {{#each threads}}
        <div class="p-4 pb-1 flex border-t border-light-gray dark:border-charleston-green">
            <div class="basis-1/12 min-w-10" id="thread-avatar">
                <a href="/@{{user.username}}"><img class="rounded-full" src="{{user.avatarUrl}}" alt="Avatar"></a>
            </div>
            <div class="basis-11/12 px-4">
                <div class="flex gap-2">
                    <div class="font-medium hover:underline">
                        <a href="/@{{user.username}}">{{user.username}}</a>
                    </div>
                    <div class="opacity-40">
                        {{getDifTime createdAt}}
                    </div>
                </div>
                <a href="/thread?id={{id}}">
                    <p>
                        {{{breaklines content}}}
                    </p>
                </a>
                <img src="{{imageUrl}}" alt="Image"
                    class="rounded-xl max-h-[300px] my-2 {{#if imageUrl}} block {{else}} hidden {{/if}}">
                <div class="flex gap-2 place-items-center">
                    <div class="rounded-3xl hover:bg-[#f0f0f0] cursor-pointer px-3 py-2 {{#if (includes ../likedThreadIds this.id)}} text-red-500 {{/if}}" data-thread-id="{{id}}">
                        <i class="{{#if (includes ../likedThreadIds this.id)}} fa-solid {{else}} fa-regular {{/if}} fa-heart"></i>
                        <span class="likes-count">{{likes.length}}</span>
                    </div>
                    <div class="rounded-3xl hover:bg-[#f0f0f0] cursor-pointer px-3 py-2" data-thread-id="{{id}}">
                        <i class="fa-regular fa-comment"></i>
                        <span class="comments-count">{{comments.length}}</span>
                    </div>
                </div>
            </div>
        </div>
        {{/each}}
    </div>
</div>

{{!-- Comment Overlay --}}
{{#with currentUser}}
<div id="comment-overlay"
    class="bg-[#030303] bg-opacity-50 w-screen h-screen fixed z-20 justify-center place-items-center hidden">
    <form action="/addComment" method="POST"
        class="w-full md:max-w-[600px] h-full md:max-h-[50vh] bg-white md:rounded-xl relative" id="comment-container">
        <input type="hidden" name="user" value="{{id}}">
        <input type="hidden" name="thread" id="comment-thread-id">
        <div class="text-center font-bold p-4 border-b border-gray-300 relative">Reply
            <button class="absolute left-4 font-normal p-1 leading-none" onclick="exitComment()">Cancel</button>
        </div>

        <div class="p-4 flex h-3/4">
            <div class="basis-1/12 min-w-10 bg-white">
                <img class="rounded-full" src="{{avatarUrl}}" alt="Avatar">
            </div>

            <div class="basis-11/12 pl-4 bg-white flex flex-col">
                <div class="font-medium">
                    {{username}}
                </div>
                <textarea name="comment" class="leading-5 outline-none resize-none" id="comment"
                    placeholder="Enter your comment" rows="1" style="scrollbar-width: none;"></textarea>
            </div>
        </div>

        <button type="submit"
            class="absolute right-6 bottom-4 bg-black text-white text-center font-medium rounded-xl px-6 py-2 hover:scale-95 border border-gray-300 leading-none">Post</button>
    </form>
</div>
{{/with}}

<script>
    // Create new thread + close
    const postInput = document.querySelector('.post-input');
    const postButton = document.getElementById('post-button');

    // Post button state
    if (postInput && postButton) {
        postInput.addEventListener('input', () => {
            if (postInput.value.trim()) {
                postButton.classList.remove('bg-white/10', 'text-gray-400', 'cursor-not-allowed');
                postButton.classList.add('bg-white', 'text-black', 'cursor-pointer');
                postButton.type = 'submit';
            } else {
                postButton.classList.add('bg-white/10', 'text-gray-400', 'cursor-not-allowed');
                postButton.classList.remove('bg-white', 'text-black', 'cursor-pointer');
                postButton.type = 'button';
            }
        });
    }

    const createNewThread = () => {
        document.getElementById('new-thread-overlay').classList.remove('hidden');
        document.getElementById('new-thread-overlay').classList.add('flex');
        const createContainer = document.getElementById('create-container');
        setTimeout(() => {
            const createContainer = document.getElementById('create-container');
            createContainer.classList.remove('scale-95', 'opacity-0');
            createContainer.classList.add('scale-100', 'opacity-100');
        }, 100);
    }

    const exitCreate = () => {
        document.getElementById('new-thread-overlay').classList.add('hidden');
        const createContainer = document.getElementById('create-container');
        createContainer.classList.remove('scale-100', 'opacity-100');
        createContainer.classList.add('scale-95', 'opacity-0');

        const textarea = document.getElementById('content');
        textarea.value = '';
        textarea.style.height = 'auto';

        const image = document.getElementById('attach-image');
        image.src = '';
        image.classList.add('hidden');

        const fileInput = document.getElementById('image-upload');
        fileInput.value = '';

        const postButton = document.getElementById('post-button');
        postButton.classList.add('text-gray-400', 'cursor-not-allowed');
        postButton.classList.remove('text-blue-500', 'cursor-pointer');

        if (image.src.startsWith('blob:')) {
            URL.revokeObjectURL(image.src);
        }
    }

    document.getElementById('new-thread-overlay').addEventListener('click', (e) => {
        const createContainer = document.getElementById('create-container');
        if (!createContainer.contains(e.target)) {
            exitCreate();
        }
    });

    const previewImage = (event) => {
        const image = document.getElementById('attach-image');

        image.src = URL.createObjectURL(event.target.files[0]);
        image.classList.remove('hidden');

        image.onload = () => {
            URL.revokeObjectURL(image.src);
        };
    }

    document.getElementById('content').addEventListener('input', function () {
        this.style.height = 'auto';
        this.style.height = this.scrollHeight + 'px';
    });

    // React + Comment
    document.querySelectorAll('.fa-heart').forEach(item => {
        item.parentElement.addEventListener('click', async function () {
            const threadId = item.parentElement.getAttribute('data-thread-id');
            const likesCount = item.parentElement.querySelector('span');
            const currentUser = '{{currentUser.id}}';
            // console.log(currentUser, threadId );
            try {
                const res = await fetch('/toggleLikes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ user: currentUser, thread: threadId })
                });
                console.log("fetching")
                const data = await res.json();

                if (data.success) {
                    likesCount.textContent = data.likesCount;
                    if (data.liked) {
                        item.classList.add('fa-solid');
                        item.classList.remove('fa-regular');
                        item.parentElement.classList.add('text-red-500');
                    } else {
                        item.classList.add('fa-regular');
                        item.classList.remove('fa-solid');
                        item.parentElement.classList.remove('text-red-500');
                    }
                } else {
                    alert(data.message || "Something went wrong");
                }
            } catch (error) {
                console.error('Error:', error);
                alert("Error occurred while liking/unliking!");
            }
        })
    });

    function exitComment() {
        document.getElementById('comment-overlay').classList.remove('flex');
        document.getElementById('comment-overlay').classList.add('hidden');
        document.getElementById('comment').value = '';
    }

    document.querySelectorAll('.fa-comment').forEach(item => {
        item.parentElement.addEventListener('click', function () {
            const threadId = item.parentElement.getAttribute('data-thread-id');
            document.getElementById('comment-thread-id').value = threadId;
            document.getElementById('comment-overlay').classList.remove('hidden');
            document.getElementById('comment-overlay').classList.add('flex');
        });
    });

    document.getElementById('comment-overlay').addEventListener('click', function (e) {
        const commentContainer = document.getElementById('comment-container');
        if (!commentContainer.contains(e.target)) {
            exitComment();
        }
    });
</script>