{{> navbar}}
{{> post-button}}
{{> login-button}}

{{!-- All/Following Options --}}
<div id="options"
    class="fixed z-10 top-0 left-1/2 -translate-x-1/2 w-full md:w-1/2 flex justify-center md:py-1 pt-14 md:bg-lotion bg-white dark:md:bg-vampire-black dark:bg-eerie-black">
    <a href="/all-threads"
        class="w-1/2 md:w-[320px] md:min-w-[320px] md:rounded-xl py-4 text-center font-medium cursor-pointer border-b-2 border-black text-black {{#if following}} text-opacity-40 {{else}} {{/if}} md:border-none md:hover:bg-gray-200"
        id="all">All</a>
    <a href="/following-threads"
        class="w-1/2 md:w-[320px] md:min-w-[320px] md:rounded-xl py-4 text-center font-medium cursor-pointer border-b-2 border-black text-black {{#if following}} {{else}} text-opacity-40 {{/if}} md:border-none md:hover:bg-gray-200"
        id="following">Following</a>
</div>

{{!-- Main container --}}
<div class="main-container mt-10 flex flex-col items-center h-screen overflow-hidden">
    <div id="feeds"
        class="shadow-lg bg-white dark:bg-eerie-black w-full h-full md:w-[640px] border-light-gray dark:border-charleston-green border rounded-t-3xl overflow-y-auto md:mt-6 mt-16 pb-36 md:pb-10"
        style="scrollbar-width: none;">
        {{#with currentUser}}
        <div class="p-4 md:flex items-center hidden relative" id="question">
            <div class="basis-1/12 min-w-10">
                <a href="/profile"><img class="rounded-full" src="{{avatarUrl}}" alt="Avatar"></a>
            </div>
            <span class="opacity-40 leading-none p-4 cursor-text" onclick="createNewThread()">How are you
                today?</span>
            <button
                class="absolute right-4 bg-white dark:bg-eerie-black text-center font-medium rounded-xl px-4 py-2 hover:scale-95 border border-light-gray dark:border-charleston-green leading-none"
                onclick="createNewThread()">Post
            </button>
        </div>
        {{/with}}
    </div>
    <div id="loading-spinner" class="flex justify-center p-4 w-full bg-white">
        <i class="fa-solid fa-spinner fa-spin fa-xl"></i>
    </div>
</div>

{{!-- Comment Overlay --}}
{{#with currentUser}}
<div id="comment-overlay"
    class="bg-[#030303] bg-opacity-50 w-screen h-screen fixed z-20 justify-center place-items-center hidden">
    <form action="/addComment" method="POST"
        class="w-full md:max-w-[600px] h-full md:max-h-[50vh] bg-white md:rounded-xl relative" id="comment-container">
        <input type="hidden" name="user" value="{{id}}">
        <input type="hidden" name="thread" id="comment-thread-id">
        <div class="text-center font-bold p-4 border-b border-gray-300 relative">Reply
            <button class="absolute left-4 font-normal p-1 leading-none" onclick="exitComment()">Cancel</button>
        </div>

        <div class="p-4 flex h-3/4">
            <div class="basis-1/12 min-w-10 bg-white">
                <img class="rounded-full" src="{{avatarUrl}}" alt="Avatar">
            </div>

            <div class="basis-11/12 pl-4 bg-white flex flex-col">
                <div class="font-medium">
                    {{username}}
                </div>
                <textarea name="comment" class="leading-5 outline-none resize-none" id="comment"
                    placeholder="Enter your comment" rows="1" style="scrollbar-width: none;"></textarea>
            </div>
        </div>

        <button type="submit"
            class="absolute right-6 bottom-4 bg-black text-white text-center font-medium rounded-xl px-6 py-2 hover:scale-95 border border-gray-300 leading-none">Post</button>
    </form>
</div>
{{/with}}

<script>
    function exitComment() {
        document.getElementById('comment-overlay').classList.remove('flex');
        document.getElementById('comment-overlay').classList.add('hidden');
        document.getElementById('comment').value = '';
    }

    if (document.getElementById('comment-overlay')) {
        document.getElementById('comment-overlay').addEventListener('click', function (e) {
            const commentContainer = document.getElementById('comment-container');
            if (!commentContainer.contains(e.target)) {
                exitComment();
            }
        });
    }

    // Load threads
    let page = 1;
    let loading = false;

    function createThreadElement(thread) {
        const threadDiv = document.createElement('div');
        threadDiv.className = "p-4 pb-1 flex border-t border-light-gray dark:border-charleston-green";

        threadDiv.innerHTML = `
            <div class="basis-1/12 min-w-10" id="thread-avatar">
                <a href="/@${thread.user.username}"><img class="rounded-full" src="${thread.user.avatarUrl}" alt="Avatar"></a>
            </div>
            <div class="basis-11/12 px-4">
                <div class="flex gap-2">
                    <div class="font-medium hover:underline">
                        <a href="/@${thread.user.username}">${thread.user.username}</a>
                    </div>
                    <div class="opacity-40">
                        ${getDifTime(thread.createdAt)}
                    </div>
                </div>
                <a href="/thread?id=${thread.id}">
                    <p>${thread.content}</p>
                </a>
                <img src="${thread.imageUrl}" alt="Image"
                    class="rounded-xl max-h-[300px] my-2 ${thread.imageUrl ? 'block' : 'hidden'}">
                <div class="flex gap-2 place-items-center">
                    <div class="rounded-3xl hover:bg-[#f0f0f0] cursor-pointer px-3 py-2 ${thread.liked ? 'text-red-500' : ''}" data-thread-id="${thread.id}">
                        <i class="${thread.liked ? 'fa-solid' : 'fa-regular'} fa-heart"></i>
                        <span class="likes-count">${thread.likes}</span>
                    </div>
                    <div class="rounded-3xl hover:bg-[#f0f0f0] cursor-pointer px-3 py-2" data-thread-id="${thread.id}">
                        <i class="fa-regular fa-comment"></i>
                        <span class="comments-count">${thread.comments}</span>
                    </div>
                </div>
            </div>
        `;
        return threadDiv;
    }

    function attachThreadEvents(threadElement) {
        // Gắn sự kiện cho nút "like"
        const likeButton = threadElement.querySelector('.fa-heart');
        likeButton.parentElement.addEventListener('click', async function () {
            const threadId = likeButton.parentElement.getAttribute('data-thread-id');
            const currentUser = '{{currentUser.id}}';
            const likesCount = likeButton.parentElement.querySelector('span');
            try {
                const res = await fetch('/toggleLikes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ thread: threadId, user: currentUser }),
                });
                const data = await res.json();

                if (data.success) {
                    likesCount.textContent = data.likesCount;
                    if (data.liked) {
                        likeButton.classList.add('fa-solid');
                        likeButton.classList.remove('fa-regular');
                        likeButton.parentElement.classList.add('text-red-500');
                    } else {
                        likeButton.classList.add('fa-regular');
                        likeButton.classList.remove('fa-solid');
                        likeButton.parentElement.classList.remove('text-red-500');
                    }
                }
            } catch (error) {
                console.error('Error toggling like:', error);
                alert("Error occurred while liking/unliking!");
            }
        });

        // Gắn sự kiện cho nút "comment"
        const commentButton = threadElement.querySelector('.fa-comment');
        commentButton.parentElement.addEventListener('click', function () {
            const threadId = commentButton.parentElement.getAttribute('data-thread-id');
            document.getElementById('comment-thread-id').value = threadId;
            document.getElementById('comment-overlay').classList.remove('hidden');
            document.getElementById('comment-overlay').classList.add('flex');
        });
    }

    function getDifTime(date) {
        const now = new Date();
        const created = new Date(date);
        const diff = now - created;

        if (diff < 1000) {
            return 'Just now';
        } else if (diff < 60000) {
            const seconds = Math.floor(diff / 1000);
            return seconds === 1 ? '1 second ago' : `${seconds} seconds ago`;
        } else if (diff < 3600000) {
            const minutes = Math.floor(diff / 60000);
            return minutes === 1 ? '1 minute ago' : `${minutes} minutes ago`;
        } else if (diff < 86400000) {
            const hours = Math.floor(diff / 3600000);
            return hours === 1 ? '1 hour ago' : `${hours} hours ago`;
        } else if (diff < 604800000) {
            const days = Math.floor(diff / 86400000);
            return days === 1 ? '1 day ago' : `${days} days ago`;
        } else if (diff < 2592000000) {
            const weeks = Math.floor(diff / 604800000);
            return weeks === 1 ? '1 week ago' : `${weeks} weeks ago`;
        } else if (diff < 31536000000) {
            const months = Math.floor(diff / 2592000000);
            return months === 1 ? '1 month ago' : `${months} months ago`;
        } else {
            const years = Math.floor(diff / 31536000000);
            return years === 1 ? '1 year ago' : `${years} years ago`;
        }
    }

    async function loadThreads() {
        try {
            if (loading) return;
            loading = true;
            document.getElementById('loading-spinner').classList.remove('hidden');
            
            if({{following}}) {
                const res = await fetch(`/loadThreads?mode=following&page=${page}`);
                const threads = await res.json();

                // Render threads mới vào giao diện
                const feedsContainer = document.getElementById('feeds');
                threads.forEach(thread => {
                    const threadElement = createThreadElement(thread);
                    feedsContainer.appendChild(threadElement);
                    attachThreadEvents(threadElement);
                });

                page++;
            }
            else {
                const res = await fetch(`/loadThreads?mode=all&page=${page}`);
                const threads = await res.json();

                // Render threads mới vào giao diện
                const feedsContainer = document.getElementById('feeds');
                threads.forEach(thread => {
                    const threadElement = createThreadElement(thread);
                    feedsContainer.appendChild(threadElement);
                    attachThreadEvents(threadElement);
                });

                page++;
            }
        } catch (error) {
            console.error('Error loading threads:', error);
        } finally {
            loading = false;
            document.getElementById('loading-spinner').classList.add('hidden');
        }
    }

    document.addEventListener('DOMContentLoaded', loadThreads);
    document.getElementById('feeds').addEventListener('scroll', function () {
        if (this.scrollTop + this.clientHeight >= this.scrollHeight - 10) {
            loadThreads();
        }
    });

</script>